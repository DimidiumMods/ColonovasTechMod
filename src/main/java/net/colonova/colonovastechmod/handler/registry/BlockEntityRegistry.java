package net.colonova.colonovastechmod.handler.registry;

import net.colonova.colonovastechmod.blockentity.*;
import net.colonova.colonovastechmod.blockentity.bottler.*;
import net.colonova.colonovastechmod.blockentity.buffer.energy.*;
import net.colonova.colonovastechmod.blockentity.buffer.fluid.*;
import net.colonova.colonovastechmod.blockentity.builder.*;
import net.colonova.colonovastechmod.blockentity.cable.energy.*;
import net.colonova.colonovastechmod.blockentity.cable.filter.*;
import net.colonova.colonovastechmod.blockentity.cable.fluid.*;
import net.colonova.colonovastechmod.blockentity.cable.gas.*;
import net.colonova.colonovastechmod.blockentity.cable.item.*;
import net.colonova.colonovastechmod.blockentity.cable.voider.*;
import net.colonova.colonovastechmod.blockentity.charger.*;
import net.colonova.colonovastechmod.blockentity.crafter.*;
import net.colonova.colonovastechmod.blockentity.crate.*;
import net.colonova.colonovastechmod.blockentity.drum.*;
import net.colonova.colonovastechmod.blockentity.furnace.*;
import net.colonova.colonovastechmod.blockentity.generator.ender.*;
import net.colonova.colonovastechmod.blockentity.generator.lava.*;
import net.colonova.colonovastechmod.blockentity.generator.nether.*;
import net.colonova.colonovastechmod.blockentity.generator.solar.*;
import net.colonova.colonovastechmod.blockentity.generator.steam.*;
import net.colonova.colonovastechmod.blockentity.generator.stirling.*;
import net.colonova.colonovastechmod.blockentity.generator.tnt.*;
import net.colonova.colonovastechmod.blockentity.generator.waterwheel.*;
import net.colonova.colonovastechmod.blockentity.generator.windmill.*;
import net.colonova.colonovastechmod.blockentity.infuser.*;
import net.colonova.colonovastechmod.blockentity.projector.*;
import net.colonova.colonovastechmod.blockentity.portal.*;
import net.colonova.colonovastechmod.blockentity.quarry.*;
import net.colonova.colonovastechmod.blockentity.spikes.*;
import net.colonova.colonovastechmod.blockentity.storage.energy.*;
import net.colonova.colonovastechmod.blockentity.tank.gas.*;
import net.colonova.colonovastechmod.blockentity.tank.fluid.*;
import net.colonova.colonovastechmod.util.Reference;

import net.minecraft.world.level.block.entity.BlockEntityType;
import net.minecraftforge.fml.javafmlmod.FMLJavaModLoadingContext;
import net.minecraftforge.registries.DeferredRegister;
import net.minecraftforge.registries.ForgeRegistries;
import net.minecraftforge.registries.RegistryObject;

public class BlockEntityRegistry
{
    private static final DeferredRegister<BlockEntityType<?>> BLOCK_ENTITIES = DeferredRegister.create(ForgeRegistries.BLOCK_ENTITY_TYPES, Reference.MOD_ID);

    public static final RegistryObject<BlockEntityType<BlockEntityHealer>> HEALER = BLOCK_ENTITIES.register("healer", () -> BlockEntityType.Builder.of(BlockEntityHealer::new, BlockRegistry.HEALER.get()).build(null));
    public static final RegistryObject<BlockEntityType<BlockEntityBasicEnergyCable>> BASIC_ENERGY_CABLE = BLOCK_ENTITIES.register("basic_energy_cable", () -> BlockEntityType.Builder.of(BlockEntityBasicEnergyCable::new, BlockRegistry.BASIC_ENERGY_CABLE.get()).build(null));
    public static final RegistryObject<BlockEntityType<BlockEntityIntermediateEnergyCable>> INTERMEDIATE_ENERGY_CABLE = BLOCK_ENTITIES.register("intermediate_energy_cable", () -> BlockEntityType.Builder.of(BlockEntityIntermediateEnergyCable::new, BlockRegistry.INTERMEDIATE_ENERGY_CABLE.get()).build(null));
    public static final RegistryObject<BlockEntityType<BlockEntityAdvancedEnergyCable>> ADVANCED_ENERGY_CABLE = BLOCK_ENTITIES.register("advanced_energy_cable", () -> BlockEntityType.Builder.of(BlockEntityAdvancedEnergyCable::new, BlockRegistry.ADVANCED_ENERGY_CABLE.get()).build(null));
    public static final RegistryObject<BlockEntityType<BlockEntityUltimateEnergyCable>> ULTIMATE_ENERGY_CABLE = BLOCK_ENTITIES.register("ultimate_energy_cable", () -> BlockEntityType.Builder.of(BlockEntityUltimateEnergyCable::new, BlockRegistry.ULTIMATE_ENERGY_CABLE.get()).build(null));
    public static final RegistryObject<BlockEntityType<BlockEntityBasicFilterCable>> BASIC_FILTER_CABLE = BLOCK_ENTITIES.register("basic_filter_cable", () -> BlockEntityType.Builder.of(BlockEntityBasicFilterCable::new, BlockRegistry.BASIC_FILTER_CABLE.get()).build(null));
    public static final RegistryObject<BlockEntityType<BlockEntityIntermediateFilterCable>> INTERMEDIATE_FILTER_CABLE = BLOCK_ENTITIES.register("intermediate_filter_cable", () -> BlockEntityType.Builder.of(BlockEntityIntermediateFilterCable::new, BlockRegistry.INTERMEDIATE_FILTER_CABLE.get()).build(null));
    public static final RegistryObject<BlockEntityType<BlockEntityAdvancedFilterCable>> ADVANCED_FILTER_CABLE = BLOCK_ENTITIES.register("advanced_filter_cable", () -> BlockEntityType.Builder.of(BlockEntityAdvancedFilterCable::new, BlockRegistry.ADVANCED_FILTER_CABLE.get()).build(null));
    public static final RegistryObject<BlockEntityType<BlockEntityUltimateFilterCable>> ULTIMATE_FILTER_CABLE = BLOCK_ENTITIES.register("ultimate_filter_cable", () -> BlockEntityType.Builder.of(BlockEntityUltimateFilterCable::new, BlockRegistry.ULTIMATE_FILTER_CABLE.get()).build(null));
    public static final RegistryObject<BlockEntityType<BlockEntityBasicFluidCable>> BASIC_FLUID_CABLE = BLOCK_ENTITIES.register("basic_fluid_cable", () -> BlockEntityType.Builder.of(BlockEntityBasicFluidCable::new, BlockRegistry.BASIC_FLUID_CABLE.get()).build(null));
    public static final RegistryObject<BlockEntityType<BlockEntityIntermediateFluidCable>> INTERMEDIATE_FLUID_CABLE = BLOCK_ENTITIES.register("intermediate_fluid_cable", () -> BlockEntityType.Builder.of(BlockEntityIntermediateFluidCable::new, BlockRegistry.INTERMEDIATE_FLUID_CABLE.get()).build(null));
    public static final RegistryObject<BlockEntityType<BlockEntityAdvancedFluidCable>> ADVANCED_FLUID_CABLE = BLOCK_ENTITIES.register("advanced_fluid_cable", () -> BlockEntityType.Builder.of(BlockEntityAdvancedFluidCable::new, BlockRegistry.ADVANCED_FLUID_CABLE.get()).build(null));
    public static final RegistryObject<BlockEntityType<BlockEntityUltimateFluidCable>> ULTIMATE_FLUID_CABLE = BLOCK_ENTITIES.register("ultimate_fluid_cable", () -> BlockEntityType.Builder.of(BlockEntityUltimateFluidCable::new, BlockRegistry.ULTIMATE_FLUID_CABLE.get()).build(null));
    public static final RegistryObject<BlockEntityType<BlockEntityBasicGasCable>> BASIC_GAS_CABLE = BLOCK_ENTITIES.register("basic_gas_cable", () -> BlockEntityType.Builder.of(BlockEntityBasicGasCable::new, BlockRegistry.BASIC_GAS_CABLE.get()).build(null));
    public static final RegistryObject<BlockEntityType<BlockEntityIntermediateGasCable>> INTERMEDIATE_GAS_CABLE = BLOCK_ENTITIES.register("intermediate_gas_cable", () -> BlockEntityType.Builder.of(BlockEntityIntermediateGasCable::new, BlockRegistry.INTERMEDIATE_GAS_CABLE.get()).build(null));
    public static final RegistryObject<BlockEntityType<BlockEntityAdvancedGasCable>> ADVANCED_GAS_CABLE = BLOCK_ENTITIES.register("advanced_gas_cable", () -> BlockEntityType.Builder.of(BlockEntityAdvancedGasCable::new, BlockRegistry.ADVANCED_GAS_CABLE.get()).build(null));
    public static final RegistryObject<BlockEntityType<BlockEntityUltimateGasCable>> ULTIMATE_GAS_CABLE = BLOCK_ENTITIES.register("ultimate_gas_cable", () -> BlockEntityType.Builder.of(BlockEntityUltimateGasCable::new, BlockRegistry.ULTIMATE_GAS_CABLE.get()).build(null));
    public static final RegistryObject<BlockEntityType<BlockEntityBasicItemCable>> BASIC_ITEM_CABLE = BLOCK_ENTITIES.register("basic_item_cable", () -> BlockEntityType.Builder.of(BlockEntityBasicItemCable::new, BlockRegistry.BASIC_ITEM_CABLE.get()).build(null));
    public static final RegistryObject<BlockEntityType<BlockEntityIntermediateItemCable>> INTERMEDIATE_ITEM_CABLE = BLOCK_ENTITIES.register("intermediate_item_cable", () -> BlockEntityType.Builder.of(BlockEntityIntermediateItemCable::new, BlockRegistry.INTERMEDIATE_ITEM_CABLE.get()).build(null));
    public static final RegistryObject<BlockEntityType<BlockEntityAdvancedItemCable>> ADVANCED_ITEM_CABLE = BLOCK_ENTITIES.register("advanced_item_cable", () -> BlockEntityType.Builder.of(BlockEntityAdvancedItemCable::new, BlockRegistry.ADVANCED_ITEM_CABLE.get()).build(null));
    public static final RegistryObject<BlockEntityType<BlockEntityUltimateItemCable>> ULTIMATE_ITEM_CABLE = BLOCK_ENTITIES.register("ultimate_item_cable", () -> BlockEntityType.Builder.of(BlockEntityUltimateItemCable::new, BlockRegistry.ULTIMATE_ITEM_CABLE.get()).build(null));
    public static final RegistryObject<BlockEntityType<BlockEntityBasicVoidCable>> BASIC_VOID_CABLE = BLOCK_ENTITIES.register("basic_void_cable", () -> BlockEntityType.Builder.of(BlockEntityBasicVoidCable::new, BlockRegistry.BASIC_VOID_CABLE.get()).build(null));
    public static final RegistryObject<BlockEntityType<BlockEntityIntermediateVoidCable>> INTERMEDIATE_VOID_CABLE = BLOCK_ENTITIES.register("intermediate_void_cable", () -> BlockEntityType.Builder.of(BlockEntityIntermediateVoidCable::new, BlockRegistry.INTERMEDIATE_VOID_CABLE.get()).build(null));
    public static final RegistryObject<BlockEntityType<BlockEntityAdvancedVoidCable>> ADVANCED_VOID_CABLE = BLOCK_ENTITIES.register("advanced_void_cable", () -> BlockEntityType.Builder.of(BlockEntityAdvancedVoidCable::new, BlockRegistry.ADVANCED_VOID_CABLE.get()).build(null));
    public static final RegistryObject<BlockEntityType<BlockEntityUltimateVoidCable>> ULTIMATE_VOID_CABLE = BLOCK_ENTITIES.register("ultimate_void_cable", () -> BlockEntityType.Builder.of(BlockEntityUltimateVoidCable::new, BlockRegistry.ULTIMATE_VOID_CABLE.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> PORTAL = BLOCK_ENTITIES.register("portal", () -> BlockEntityType.Builder.of(BlockEntityPortal::new, BlockRegistry.PORTAL.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> PORTAL_CONTROLLER = BLOCK_ENTITIES.register("portal_controller", () -> BlockEntityType.Builder.of(BlockEntityPortalController::new, BlockRegistry.PORTAL_CONTROLLER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> PORTAL_FRAME = BLOCK_ENTITIES.register("portal_frame", () -> BlockEntityType.Builder.of(BlockEntityPortalFrame::new, BlockRegistry.PORTAL_FRAME.get()).build(null)); //todo this might not need a block entity
    public static final RegistryObject<BlockEntityType<?>> PORTAL_INTERFACE = BLOCK_ENTITIES.register("portal_interface", () -> BlockEntityType.Builder.of(BlockEntityPortalInterface::new, BlockRegistry.PORTAL_INTERFACE.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> PORTAL_STABILIZER = BLOCK_ENTITIES.register("portal_stabilizer", () -> BlockEntityType.Builder.of(BlockEntityPortalStabilizer::new, BlockRegistry.PORTAL_STABILIZER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> PORTAL_PROGRAMMER = BLOCK_ENTITIES.register("portal_programmer", () -> BlockEntityType.Builder.of(BlockEntityPortalProgrammer::new, BlockRegistry.PORTAL_PROGRAMMER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> AUTOMATIC_ANVIL = BLOCK_ENTITIES.register("automatic_anvil", () -> BlockEntityType.Builder.of(BlockEntityAutomaticAnvil::new, BlockRegistry.AUTOMATIC_ANVIL.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> BASIC_BOTTLER = BLOCK_ENTITIES.register("basic_bottler", () -> BlockEntityType.Builder.of(BlockEntityBasicBottler::new, BlockRegistry.BASIC_BOTTLER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> INTERMEDIATE_BOTTLER = BLOCK_ENTITIES.register("intermediate_bottler", () -> BlockEntityType.Builder.of(BlockEntityIntermediateBottler::new, BlockRegistry.INTERMEDIATE_BOTTLER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ADVANCED_BOTTLER = BLOCK_ENTITIES.register("advanced_bottler", () -> BlockEntityType.Builder.of(BlockEntityAdvancedBottler::new, BlockRegistry.ADVANCED_BOTTLER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ULTIMATE_BOTTLER = BLOCK_ENTITIES.register("ultimate_bottler", () -> BlockEntityType.Builder.of(BlockEntityUltimateBottler::new, BlockRegistry.ULTIMATE_BOTTLER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> BREAKER = BLOCK_ENTITIES.register("breaker", () -> BlockEntityType.Builder.of(BlockEntityBreaker::new, BlockRegistry.BREAKER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> BASIC_ENERGY_BUFFER = BLOCK_ENTITIES.register("basic_energy_buffer", () -> BlockEntityType.Builder.of(BlockEntityBasicEnergyBuffer::new, BlockRegistry.BASIC_ENERGY_BUFFER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> INTERMEDIATE_ENERGY_BUFFER = BLOCK_ENTITIES.register("intermediate_energy_buffer", () -> BlockEntityType.Builder.of(BlockEntityIntermediateEnergyBuffer::new, BlockRegistry.INTERMEDIATE_ENERGY_BUFFER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ADVANCED_ENERGY_BUFFER = BLOCK_ENTITIES.register("advanced_energy_buffer", () -> BlockEntityType.Builder.of(BlockEntityAdvancedEnergyBuffer::new, BlockRegistry.ADVANCED_ENERGY_BUFFER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ULTIMATE_ENERGY_BUFFER = BLOCK_ENTITIES.register("ultimate_energy_buffer", () -> BlockEntityType.Builder.of(BlockEntityUltimateBuilder::new, BlockRegistry.ULTIMATE_ENERGY_BUFFER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> BASIC_FLUID_BUFFER = BLOCK_ENTITIES.register("basic_fluid_buffer", () -> BlockEntityType.Builder.of(BlockEntityBasicFluidBuffer::new, BlockRegistry.BASIC_FLUID_BUFFER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> INTERMEDIATE_FLUID_BUFFER = BLOCK_ENTITIES.register("intermediate_fluid_buffer", () -> BlockEntityType.Builder.of(BlockEntityIntermediateFluidBuffer::new, BlockRegistry.INTERMEDIATE_FLUID_BUFFER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ADVANCED_FLUID_BUFFER = BLOCK_ENTITIES.register("advanced_fluid_buffer", () -> BlockEntityType.Builder.of(BlockEntityAdvancedFluidBuffer::new, BlockRegistry.ADVANCED_FLUID_BUFFER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ULTIMATE_FLUID_BUFFER = BLOCK_ENTITIES.register("ultimate_fluid_buffer", () -> BlockEntityType.Builder.of(BlockEntityUltimateFluidBuffer::new, BlockRegistry.ULTIMATE_FLUID_BUFFER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> BASIC_BUILDER = BLOCK_ENTITIES.register("basic_builder", () -> BlockEntityType.Builder.of(BlockEntityBasicBuilder::new, BlockRegistry.BASIC_BUILDER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> INTERMEDIATE_BUILDER = BLOCK_ENTITIES.register("intermediate_builder", () -> BlockEntityType.Builder.of(BlockEntityIntermediateBuilder::new, BlockRegistry.INTERMEDIATE_BUILDER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ADVANCED_BUILDER = BLOCK_ENTITIES.register("advanced_builder", () -> BlockEntityType.Builder.of(BlockEntityAdvancedBuilder::new, BlockRegistry.ADVANCED_BUILDER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ULTIMATE_BUILDER = BLOCK_ENTITIES.register("ultimate_builder", () -> BlockEntityType.Builder.of(BlockEntityUltimateBuilder::new, BlockRegistry.ULTIMATE_BUILDER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ITEM_CANNON = BLOCK_ENTITIES.register("item_cannon", () -> BlockEntityType.Builder.of(BlockEntityItemCannon::new, BlockRegistry.ITEM_CANNON.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> BASIC_CHARGER = BLOCK_ENTITIES.register("basic_charger", () -> BlockEntityType.Builder.of(BlockEntityBasicCharger::new, BlockRegistry.BASIC_CHARGER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> INTERMEDIATE_CHARGER = BLOCK_ENTITIES.register("intermediate_charger", () -> BlockEntityType.Builder.of(BlockEntityIntermediateCharger::new, BlockRegistry.INTERMEDIATE_CHARGER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ADVANCED_CHARGER = BLOCK_ENTITIES.register("advanced_charger", () -> BlockEntityType.Builder.of(BlockEntityAdvancedCrafter::new, BlockRegistry.ADVANCED_CHARGER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ULTIMATE_CHARGER = BLOCK_ENTITIES.register("ultimate_charger", () -> BlockEntityType.Builder.of(BlockEntityUltimateCharger::new, BlockRegistry.ULTIMATE_CHARGER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> CLOCK = BLOCK_ENTITIES.register("clock", () -> BlockEntityType.Builder.of(BlockEntityClock::new, BlockRegistry.CLOCK.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> BASIC_CRAFTER = BLOCK_ENTITIES.register("basic_crafter", () -> BlockEntityType.Builder.of(BlockEntityBasicCrafter::new, BlockRegistry.BASIC_CRAFTER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> INTERMEDIATE_CRAFTER = BLOCK_ENTITIES.register("intermediate_crafter", () -> BlockEntityType.Builder.of(BlockEntityIntermediateCrafter::new, BlockRegistry.INTERMEDIATE_CRAFTER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ADVANCED_CRAFTER = BLOCK_ENTITIES.register("advanced_crafter", () -> BlockEntityType.Builder.of(BlockEntityAdvancedCrafter::new, BlockRegistry.ADVANCED_CRAFTER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ULTIMATE_CRAFTER = BLOCK_ENTITIES.register("ultimate_crafter", () -> BlockEntityType.Builder.of(BlockEntityUltimateCrafter::new, BlockRegistry.ULTIMATE_CRAFTER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> BASIC_CRATE = BLOCK_ENTITIES.register("basic_crate", () -> BlockEntityType.Builder.of(BlockEntityBasicCrate::new, BlockRegistry.BASIC_CRATE.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> INTERMEDIATE_CRATE = BLOCK_ENTITIES.register("intermediate_crate", () -> BlockEntityType.Builder.of(BlockEntityIntermediateCrate::new, BlockRegistry.INTERMEDIATE_CRATE.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ADVANCED_CRATE = BLOCK_ENTITIES.register("advanced_crate", () -> BlockEntityType.Builder.of(BlockEntityAdvancedCrate::new, BlockRegistry.ADVANCED_CRATE.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ULTIMATE_CRATE = BLOCK_ENTITIES.register("ultimate_crate", () -> BlockEntityType.Builder.of(BlockEntityUltimateCrate::new, BlockRegistry.ULTIMATE_CRATE.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> DRAIN = BLOCK_ENTITIES.register("drain", () -> BlockEntityType.Builder.of(BlockEntityDrain::new, BlockRegistry.DRAIN.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> DROPPER = BLOCK_ENTITIES.register("dropper", () -> BlockEntityType.Builder.of(BlockEntityDropper::new, BlockRegistry.DROPPER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> BASIC_DRUM = BLOCK_ENTITIES.register("basic_drum", () -> BlockEntityType.Builder.of(BlockEntityBasicDrum::new, BlockRegistry.BASIC_DRUM.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> INTERMEDIATE_DRUM = BLOCK_ENTITIES.register("intermediate_drum", () -> BlockEntityType.Builder.of(BlockEntityIntermediateDrum::new, BlockRegistry.INTERMEDIATE_DRUM.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ADVANCED_DRUM = BLOCK_ENTITIES.register("advanced_drum", () -> BlockEntityType.Builder.of(BlockEntityAdvancedDrum::new, BlockRegistry.ADVANCED_DRUM.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ULTIMATE_DRUM = BLOCK_ENTITIES.register("ultimate_drum", () -> BlockEntityType.Builder.of(BlockEntityUltimateDrum::new, BlockRegistry.ULTIMATE_DRUM.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> MAGIC_EGG = BLOCK_ENTITIES.register("magic_egg", () -> BlockEntityType.Builder.of(BlockEntityMagicEgg::new, BlockRegistry.MAGIC_EGG.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ELEVATOR = BLOCK_ENTITIES.register("elevator", () -> BlockEntityType.Builder.of(BlockEntityElevator::new, BlockRegistry.ELEVATOR.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ENCHANTER = BLOCK_ENTITIES.register("enchanter", () -> BlockEntityType.Builder.of(BlockEntityEnchanter::new, BlockRegistry.ENCHANTER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> BASIC_ENDER_GENERATOR = BLOCK_ENTITIES.register("basic_ender_generator", () -> BlockEntityType.Builder.of(BlockEntityBasicEnderGenerator::new, BlockRegistry.BASIC_ENDER_GENERATOR.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> INTERMEDIATE_ENDER_GENERATOR = BLOCK_ENTITIES.register("intermediate_ender_generator", () -> BlockEntityType.Builder.of(BlockEntityIntermediateEnderGenerator::new, BlockRegistry.INTERMEDIATE_ENDER_GENERATOR.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ADVANCED_ENDER_GENERATOR = BLOCK_ENTITIES.register("advanced_ender_generator", () -> BlockEntityType.Builder.of(BlockEntityAdvancedEnderGenerator::new, BlockRegistry.ADVANCED_ENDER_GENERATOR.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ULTIMATE_ENDER_GENERATOR = BLOCK_ENTITIES.register("ultimate_ender_generator", () -> BlockEntityType.Builder.of(BlockEntityUltimateEnderGenerator::new, BlockRegistry.ULTIMATE_ENDER_GENERATOR.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> FLAG = BLOCK_ENTITIES.register("flag", () -> BlockEntityType.Builder.of(BlockEntityFlag::new, BlockRegistry.FLAG.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> BASIC_ENERGY_STORAGE = BLOCK_ENTITIES.register("basic_energy_storage", () -> BlockEntityType.Builder.of(BlockEntityBasicEnergyStorage::new, BlockRegistry.BASIC_ENERGY_STORAGE.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> INTERMEDIATE_ENERGY_STORAGE = BLOCK_ENTITIES.register("intermediate_energy_storage", () -> BlockEntityType.Builder.of(BlockEntityIntermediateEnergyStorage::new, BlockRegistry.INTERMEDIATE_ENERGY_STORAGE.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ADVANCED_ENERGY_STORAGE = BLOCK_ENTITIES.register("advanced_energy_storage", () -> BlockEntityType.Builder.of(BlockEntityAdvancedEnergyStorage::new, BlockRegistry.ADVANCED_ENERGY_STORAGE.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ULTIMATE_ENERGY_STORAGE = BLOCK_ENTITIES.register("ultimate_energy_storage", () -> BlockEntityType.Builder.of(BlockEntityUltimateEnergyStorage::new, BlockRegistry.ULTIMATE_ENERGY_STORAGE.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> BASIC_FURNACE = BLOCK_ENTITIES.register("basic_furnace", () -> BlockEntityType.Builder.of(BlockEntityBasicFurnace::new, BlockRegistry.BASIC_FURNACE.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> INTERMEDIATE_FURNACE = BLOCK_ENTITIES.register("intermediate_furnace", () -> BlockEntityType.Builder.of(BlockEntityIntermediateFurnace::new, BlockRegistry.INTERMEDIATE_FURNACE.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ADVANCED_FURNACE = BLOCK_ENTITIES.register("advanced_furnace", () -> BlockEntityType.Builder.of(BlockEntityAdvancedFurnace::new, BlockRegistry.ADVANCED_FURNACE.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ULTIMATE_FURNACE = BLOCK_ENTITIES.register("ultimate_furnace", () -> BlockEntityType.Builder.of(BlockEntityUltimateFurnace::new, BlockRegistry.ULTIMATE_FURNACE.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> GRINDER = BLOCK_ENTITIES.register("grinder", () -> BlockEntityType.Builder.of(BlockEntityGrinder::new, BlockRegistry.GRINDER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> BASIC_INFUSER = BLOCK_ENTITIES.register("basic_infuser", () -> BlockEntityType.Builder.of(BlockEntityBasicInfuser::new, BlockRegistry.BASIC_INFUSER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> INTERMEDIATE_INFUSER = BLOCK_ENTITIES.register("intermediate_infuser", () -> BlockEntityType.Builder.of(BlockEntityIntermediateInfuser::new, BlockRegistry.INTERMEDIATE_INFUSER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ADVANCED_INFUSER = BLOCK_ENTITIES.register("advanced_infuser", () -> BlockEntityType.Builder.of(BlockEntityAdvancedInfuser::new, BlockRegistry.ADVANCED_INFUSER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ULTIMATE_INFUSER = BLOCK_ENTITIES.register("ultimate_infuser", () -> BlockEntityType.Builder.of(BlockEntityUltimateInfuser::new, BlockRegistry.ULTIMATE_INFUSER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> BASIC_LAVA_GENERATOR = BLOCK_ENTITIES.register("basic_lava_generator", () -> BlockEntityType.Builder.of(BlockEntityBasicLavaGenerator::new, BlockRegistry.BASIC_LAVA_GENERATOR.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> INTERMEDIATE_LAVA_GENERATOR = BLOCK_ENTITIES.register("intermediate_lava_generator", () -> BlockEntityType.Builder.of(BlockEntityIntermediateLavaGenerator::new, BlockRegistry.INTERMEDIATE_LAVA_GENERATOR.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ADVANCED_LAVA_GENERATOR = BLOCK_ENTITIES.register("advanced_lava_generator", () -> BlockEntityType.Builder.of(BlockEntityAdvancedLavaGenerator::new, BlockRegistry.ADVANCED_LAVA_GENERATOR.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ULTIMATE_LAVA_GENERATOR = BLOCK_ENTITIES.register("ultimate_lava_generator", () -> BlockEntityType.Builder.of(BlockEntityUltimateLavaGenerator::new, BlockRegistry.ULTIMATE_LAVA_GENERATOR.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> MELTER = BLOCK_ENTITIES.register("melter", () -> BlockEntityType.Builder.of(BlockEntityMelter::new, BlockRegistry.MELTER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> BASIC_NETHER_STAR_GENERATOR = BLOCK_ENTITIES.register("basic_nether_star_generator", () -> BlockEntityType.Builder.of(BlockEntityBasicNetherStarGenerator::new, BlockRegistry.BASIC_NETHER_STAR_GENERATOR.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> INTERMEDIATE_NETHER_STAR_GENERATOR = BLOCK_ENTITIES.register("intermediate_nether_star_generator", () -> BlockEntityType.Builder.of(BlockEntityIntermediateNetherStarGenerator::new, BlockRegistry.INTERMEDIATE_NETHER_STAR_GENERATOR.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ADVANCED_NETHER_STAR_GENERATOR = BLOCK_ENTITIES.register("advanced_nether_star_generator", () -> BlockEntityType.Builder.of(BlockEntityAdvancedNetherStarGenerator::new, BlockRegistry.ADVANCED_NETHER_STAR_GENERATOR.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ULTIMATE_NETHER_STAR_GENERATOR = BLOCK_ENTITIES.register("ultimate_nether_star_generator", () -> BlockEntityType.Builder.of(BlockEntityUltimateNetherStarGenerator::new, BlockRegistry.ULTIMATE_NETHER_STAR_GENERATOR.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> PAINT_CAN = BLOCK_ENTITIES.register("paint_can", () -> BlockEntityType.Builder.of(BlockEntityPaintCan::new, BlockRegistry.PAINT_CAN.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> PAINTER = BLOCK_ENTITIES.register("painter", () -> BlockEntityType.Builder.of(BlockEntityPainter::new, BlockRegistry.PAINTER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> PLACER = BLOCK_ENTITIES.register("placer", () -> BlockEntityType.Builder.of(BlockEntityPlacer::new, BlockRegistry.PLACER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> POWER_MONITOR = BLOCK_ENTITIES.register("power_monitor", () -> BlockEntityType.Builder.of(BlockEntityPowerMonitor::new, BlockRegistry.POWER_MONITOR.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> BASIC_PROJECTOR = BLOCK_ENTITIES.register("basic_projector", () -> BlockEntityType.Builder.of(BlockEntityBasicProjector::new, BlockRegistry.BASIC_PROJECTOR.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> INTERMEDIATE_PROJECTOR = BLOCK_ENTITIES.register("intermediate_projector", () -> BlockEntityType.Builder.of(BlockEntityIntermediateProjector::new, BlockRegistry.INTERMEDIATE_PROJECTOR.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ADVANCED_PROJECTOR = BLOCK_ENTITIES.register("advanced_projector", () -> BlockEntityType.Builder.of(BlockEntityAdvancedProjector::new, BlockRegistry.ADVANCED_PROJECTOR.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ULTIMATE_PROJECTOR = BLOCK_ENTITIES.register("ultimate_projector", () -> BlockEntityType.Builder.of(BlockEntityUltimateProjector::new, BlockRegistry.ULTIMATE_PROJECTOR.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> QUARRY = BLOCK_ENTITIES.register("quarry", () -> BlockEntityType.Builder.of(BlockEntityQuarry::new, BlockRegistry.QUARRY.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> QUARRY_SPEED_UPGRADE = BLOCK_ENTITIES.register("quarry_speed_upgrade", () -> BlockEntityType.Builder.of(BlockEntityQuarrySpeedUpgrade::new, BlockRegistry.QUARRY_SPEED_UPGRADE.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> QUARRY_SILK_UPGRADE = BLOCK_ENTITIES.register("quarry_silk_upgrade", () -> BlockEntityType.Builder.of(BlockEntityQuarrySilkUpgrade::new, BlockRegistry.QUARRY_SILK_UPGRADE.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> QUARRY_FORTUNE_UPGRADE = BLOCK_ENTITIES.register("quarry_fortune_upgrade", () -> BlockEntityType.Builder.of(BlockEntityQuarryFortuneUpgrade::new, BlockRegistry.QUARRY_FORTUNE_UPGRADE.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> QUARRY_VOID_UPGRADE = BLOCK_ENTITIES.register("quarry_void_upgrade", () -> BlockEntityType.Builder.of(BlockEntityQuarryVoidUpgrade::new, BlockRegistry.QUARRY_VOID_UPGRADE.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> SHOWER = BLOCK_ENTITIES.register("shower", () -> BlockEntityType.Builder.of(BlockEntityShower::new, BlockRegistry.SHOWER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> BASIC_SOLAR_PANEL = BLOCK_ENTITIES.register("basic_solar_panel", () -> BlockEntityType.Builder.of(BlockEntityBasicSolarPanel::new, BlockRegistry.BASIC_SOLAR_PANEL.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> INTERMEDIATE_SOLAR_PANEL = BLOCK_ENTITIES.register("intermediate_solar_panel", () -> BlockEntityType.Builder.of(BlockEntityIntermediateSolarPanel::new, BlockRegistry.INTERMEDIATE_SOLAR_PANEL.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ADVANCED_SOLAR_PANEL = BLOCK_ENTITIES.register("advanced_solar_panel", () -> BlockEntityType.Builder.of(BlockEntityAdvancedSolarPanel::new, BlockRegistry.ADVANCED_SOLAR_PANEL.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ULTIMATE_SOLAR_PANEL = BLOCK_ENTITIES.register("ultimate_solar_panel", () -> BlockEntityType.Builder.of(BlockEntityUltimateSolarPanel::new, BlockRegistry.ULTIMATE_SOLAR_PANEL.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> SOUND_MUFFLER = BLOCK_ENTITIES.register("sound_muffler", () -> BlockEntityType.Builder.of(BlockEntitySoundMuffler::new, BlockRegistry.SOUND_MUFFLER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> SPAWNER = BLOCK_ENTITIES.register("spawner", () -> BlockEntityType.Builder.of(BlockEntitySpawner::new, BlockRegistry.SPAWNER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> BASIC_SPIKES = BLOCK_ENTITIES.register("basic_spikes", () -> BlockEntityType.Builder.of(BlockEntityBasicSpikes::new, BlockRegistry.BASIC_SPIKES.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> INTERMEDIATE_SPIKES = BLOCK_ENTITIES.register("intermediate_spikes", () -> BlockEntityType.Builder.of(BlockEntityIntermediateSpikes::new, BlockRegistry.INTERMEDIATE_SPIKES.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ADVANCED_SPIKES = BLOCK_ENTITIES.register("advanced_spikes", () -> BlockEntityType.Builder.of(BlockEntityAdvancedSpikes::new, BlockRegistry.ADVANCED_SPIKES.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ULTIMATE_SPIKES = BLOCK_ENTITIES.register("ultimate_spikes", () -> BlockEntityType.Builder.of(BlockEntityUltimateSpikes::new, BlockRegistry.ULTIMATE_SPIKES.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> BASIC_STEAM_GENERATOR = BLOCK_ENTITIES.register("basic_steam_generator", () -> BlockEntityType.Builder.of(BlockEntityBasicSteamGenerator::new, BlockRegistry.BASIC_STEAM_GENERATOR.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> INTERMEDIATE_STEAM_GENERATOR = BLOCK_ENTITIES.register("intermediate_steam_generator", () -> BlockEntityType.Builder.of(BlockEntityIntermediateSteamGenerator::new, BlockRegistry.INTERMEDIATE_STEAM_GENERATOR.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ADVANCED_STEAM_GENERATOR = BLOCK_ENTITIES.register("advanced_steam_generator", () -> BlockEntityType.Builder.of(BlockEntityAdvancedSteamGenerator::new, BlockRegistry.ADVANCED_STEAM_GENERATOR.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ULTIMATE_STEAM_GENERATOR = BLOCK_ENTITIES.register("ultimate_steam_generator", () -> BlockEntityType.Builder.of(BlockEntityUltimateSteamGenerator::new, BlockRegistry.ULTIMATE_STEAM_GENERATOR.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> BASIC_STIRLING_GENERATOR = BLOCK_ENTITIES.register("basic_stirling_generator", () -> BlockEntityType.Builder.of(BlockEntityBasicStirlingGenerator::new, BlockRegistry.BASIC_STIRLING_GENERATOR.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> INTERMEDIATE_STIRLING_GENERATOR = BLOCK_ENTITIES.register("intermediate_stirling_generator", () -> BlockEntityType.Builder.of(BlockEntityIntermediateStirlingGenerator::new, BlockRegistry.INTERMEDIATE_STIRLING_GENERATOR.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ADVANCED_STIRLING_GENERATOR = BLOCK_ENTITIES.register("advanced_stirling_generator", () -> BlockEntityType.Builder.of(BlockEntityAdvancedStirlingGenerator::new, BlockRegistry.ADVANCED_STIRLING_GENERATOR.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ULTIMATE_STIRLING_GENERATOR = BLOCK_ENTITIES.register("ultimate_stirling_generator", () -> BlockEntityType.Builder.of(BlockEntityUltimateStirlingGenerator::new, BlockRegistry.ULTIMATE_STIRLING_GENERATOR.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> TANK = BLOCK_ENTITIES.register("tank", () -> BlockEntityType.Builder.of(BlockEntityTank::new, BlockRegistry.TANK.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> BASIC_FLUID_TANK = BLOCK_ENTITIES.register("basic_fluid_tank", () -> BlockEntityType.Builder.of(BlockEntityBasicFluidTank::new, BlockRegistry.BASIC_FLUID_TANK.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> INTERMEDIATE_FLUID_TANK = BLOCK_ENTITIES.register("intermediate_fluid_tank", () -> BlockEntityType.Builder.of(BlockEntityIntermediateFluidTank::new, BlockRegistry.INTERMEDIATE_FLUID_TANK.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ADVANCED_FLUID_TANK = BLOCK_ENTITIES.register("advanced_fluid_tank", () -> BlockEntityType.Builder.of(BlockEntityAdvancedFluidTank::new, BlockRegistry.ADVANCED_FLUID_TANK.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ULTIMATE_FLUID_TANK = BLOCK_ENTITIES.register("ultimate_fluid_tank", () -> BlockEntityType.Builder.of(BlockEntityUltimateFluidTank::new, BlockRegistry.ULTIMATE_FLUID_TANK.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> BASIC_GAS_TANK = BLOCK_ENTITIES.register("basic_gas_tank", () -> BlockEntityType.Builder.of(BlockEntityBasicGasTank::new, BlockRegistry.BASIC_GAS_TANK.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> INTERMEDIATE_GAS_TANK = BLOCK_ENTITIES.register("intermediate_gas_tank", () -> BlockEntityType.Builder.of(BlockEntityIntermediateGasTank::new, BlockRegistry.INTERMEDIATE_GAS_TANK.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ADVANCED_GAS_TANK = BLOCK_ENTITIES.register("advanced_gas_tank", () -> BlockEntityType.Builder.of(BlockEntityAdvancedGasTank::new, BlockRegistry.ADVANCED_GAS_CABLE.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ULTIMATE_GAS_TANK = BLOCK_ENTITIES.register("ultimate_gas_tank", () -> BlockEntityType.Builder.of(BlockEntityUltimateGasTank::new, BlockRegistry.ULTIMATE_GAS_TANK.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> PUMP = BLOCK_ENTITIES.register("pump", () -> BlockEntityType.Builder.of(BlockEntityPump::new, BlockRegistry.PUMP.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> TIME_CONTROLLER = BLOCK_ENTITIES.register("time_controller", () -> BlockEntityType.Builder.of(BlockEntityTimeController::new, BlockRegistry.TIME_CONTROLLER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> BASIC_TNT_GENERATOR = BLOCK_ENTITIES.register("basic_tnt_generator", () -> BlockEntityType.Builder.of(BlockEntityBasicTNTGenerator::new, BlockRegistry.BASIC_TNT_GENERATOR.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> INTERMEDIATE_TNT_GENERATOR = BLOCK_ENTITIES.register("intermediate_tnt_generator", () -> BlockEntityType.Builder.of(BlockEntityIntermediateTNTGenerator::new, BlockRegistry.INTERMEDIATE_TNT_GENERATOR.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ADVANCED_TNT_GENERATOR = BLOCK_ENTITIES.register("advanced_tnt_generator", () -> BlockEntityType.Builder.of(BlockEntityAdvancedTNTGenerator::new, BlockRegistry.ADVANCED_TNT_GENERATOR.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ULTIMATE_TNT_GENERATOR = BLOCK_ENTITIES.register("ultimate_tnt_generator", () -> BlockEntityType.Builder.of(BlockEntityUltimateTNTGenerator::new, BlockRegistry.ULTIMATE_TNT_GENERATOR.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> TRADER = BLOCK_ENTITIES.register("trader", () -> BlockEntityType.Builder.of(BlockEntityTrader::new, BlockRegistry.TRADER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> WEATHER_CONTROLLER = BLOCK_ENTITIES.register("weather_controller", () -> BlockEntityType.Builder.of(BlockEntityWeatherController::new, BlockRegistry.WEATHER_MUFFLER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> TRANSCEIVER = BLOCK_ENTITIES.register("transceiver", () -> BlockEntityType.Builder.of(BlockEntityTransceiver::new, BlockRegistry.TRANSCEIVER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> UNCRAFTER = BLOCK_ENTITIES.register("uncrafter", () -> BlockEntityType.Builder.of(BlockEntityUncrafter::new, BlockRegistry.UNCRAFTER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> REPAIRER = BLOCK_ENTITIES.register("repairer", () -> BlockEntityType.Builder.of(BlockEntityRepairer::new, BlockRegistry.REPAIRER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> VACUUM_HOPPER = BLOCK_ENTITIES.register("vacuum_hopper", () -> BlockEntityType.Builder.of(BlockEntityVacuumHopper::new, BlockRegistry.VACUUM_HOPPER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> VILLAGE_LOCATOR = BLOCK_ENTITIES.register("village_locator", () -> BlockEntityType.Builder.of(BlockEntityVillageLocator::new, BlockRegistry.VILLAGE_LOCATOR.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> VOID_PORTAL = BLOCK_ENTITIES.register("void_portal", () -> BlockEntityType.Builder.of(BlockEntityVoidPortal::new, BlockRegistry.VOID_PORTAL.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> BASIC_WATER_WHEEL = BLOCK_ENTITIES.register("basic_water_wheel", () -> BlockEntityType.Builder.of(BlockEntityBasicWaterWheel::new, BlockRegistry.BASIC_WATER_WHEEL.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> INTERMEDIATE_WATER_WHEEL = BLOCK_ENTITIES.register("intermediate_water_wheel", () -> BlockEntityType.Builder.of(BlockEntityIntermediateWaterWheel::new, BlockRegistry.INTERMEDIATE_WATER_WHEEL.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ADVANCED_WATER_WHEEL = BLOCK_ENTITIES.register("advanced_water_wheel", () -> BlockEntityType.Builder.of(BlockEntityAdvancedWaterWheel::new, BlockRegistry.ADVANCED_WATER_WHEEL.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ULTIMATE_WATER_WHEEL = BLOCK_ENTITIES.register("ultimate_water_wheel", () -> BlockEntityType.Builder.of(BlockEntityUltimateWaterWheel::new, BlockRegistry.ULTIMATE_WATER_WHEEL.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> WEATHER_MUFFLER = BLOCK_ENTITIES.register("weather_muffler", () -> BlockEntityType.Builder.of(BlockEntityWeatherMuffler::new, BlockRegistry.WEATHER_MUFFLER.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> BASIC_WINDMILL = BLOCK_ENTITIES.register("basic_windmill", () -> BlockEntityType.Builder.of(BlockEntityBasicWindmill::new, BlockRegistry.BASIC_WINDMILL.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> INTERMEDIATE_WINDMILL = BLOCK_ENTITIES.register("intermediate_windmill", () -> BlockEntityType.Builder.of(BlockEntityIntermediateWindmill::new, BlockRegistry.INTERMEDIATE_WINDMILL.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ADVANCED_WINDMILL = BLOCK_ENTITIES.register("advanced_windmill", () -> BlockEntityType.Builder.of(BlockEntityAdvancedWindmill::new, BlockRegistry.ADVANCED_WINDMILL.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> ULTIMATE_WINDMILL = BLOCK_ENTITIES.register("ultimate_windmill", () -> BlockEntityType.Builder.of(BlockEntityUltimateWindmill::new, BlockRegistry.ULTIMATE_WINDMILL.get()).build(null));
    public static final RegistryObject<BlockEntityType<?>> WIRELESS_CHARGER = BLOCK_ENTITIES.register("wireless_charger", () -> BlockEntityType.Builder.of(BlockEntityWirelessCharger::new, BlockRegistry.WIRELESS_CHARGER.get()).build(null));
    //todo Charger
    public static final RegistryObject<BlockEntityType<?>> WITHER_BUILDER = BLOCK_ENTITIES.register("wither_builder", () -> BlockEntityType.Builder.of(BlockEntityWitherBuilder::new, BlockRegistry.WITHER_BUILDER.get()).build(null));


    public static void registerBlockEntities()
    {
        BLOCK_ENTITIES.register(FMLJavaModLoadingContext.get().getModEventBus());
    }
}
